{"version":3,"sources":["components/NavBar/NavBar.jsx","components/PictureCards/PictureCards.jsx","components/Title/Title.jsx","components/Wrapper/Wrapper.jsx","App.js","serviceWorker.js","index.js"],"names":["Nav","props","react_default","a","createElement","href","title","id","responsePrompt","score","hiScore","PictureCards","className","value","onClick","handleClick","alt","name","src","image","Title","children","Wrapper","require","App","state","clicked","pictureCardsJSON","_this","indexOf","handleIncrement","setState","concat","handleReset","newScore","handleShuffle","shuffledPictures","pictureArray","i","length","j","Math","floor","random","_ref","shufflePictures","_this2","this","components_Wrapper_Wrapper","NavBar_NavBar","components_Title_Title","map","pictureCard","components_PictureCards_PictureCards","key","Component","Boolean","window","location","hostname","match","publish","err","ReactDOM","hydrate","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sMAmBeA,SAhBH,SAAAC,GAAK,OACfC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGC,KAAK,KAAKJ,EAAMK,QAGrBJ,EAAAC,EAAAC,cAAA,MAAIG,GAAG,MAAMN,EAAMO,gBAEnBN,EAAAC,EAAAC,cAAA,MAAIG,GAAG,SAAP,UAAuBN,EAAMQ,OAE7BP,EAAAC,EAAAC,cAAA,MAAIG,GAAG,WAAP,aAA4BN,EAAMS,aCCzBC,SAZM,SAAAV,GAAK,OACxBC,EAAAC,EAAAC,cAAA,OACEQ,UAAU,OACVC,MAAOZ,EAAMM,GACbO,QAAS,kBAAMb,EAAMc,YAAYd,EAAMM,MAEvCL,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,kBACbV,EAAAC,EAAAC,cAAA,OAAKY,IAAKf,EAAMgB,KAAMC,IAAKjB,EAAMkB,YCLxBC,SAFD,SAAAnB,GAAK,OAAIC,EAAAC,EAAAC,cAAA,MAAIQ,UAAU,SAASX,EAAMoB,YCErCC,SAFC,SAAArB,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,WAAWX,EAAMoB,YCIzDE,EAAQ,QA6FOC,6MAlFbC,MAAQ,CACNhB,MAAO,EACPC,QAAS,EACTgB,QAAS,GACTlB,eAAgB,GAChBmB,sBAGFZ,YAAc,SAAAR,IAC2B,GAAnCqB,EAAKH,MAAMC,QAAQG,QAAQtB,IAC7BqB,EAAKE,kBACLF,EAAKG,SAAS,CAAEL,QAASE,EAAKH,MAAMC,QAAQM,OAAOzB,MAEnDqB,EAAKK,iBAITH,gBAAkB,WAChB,IAAMI,EAAWN,EAAKH,MAAMhB,MAAQ,EACpCmB,EAAKG,SAAS,CACZtB,MAAOyB,EACP1B,eAAgB,aAEd0B,GAAYN,EAAKH,MAAMf,QACzBkB,EAAKG,SAAS,CAAErB,QAASwB,IACJ,GAAZA,GACTN,EAAKG,SAAS,CAAEvB,eAAgB,4BAElCoB,EAAKO,mBAGPF,YAAc,WACZL,EAAKG,SAAS,CACZtB,MAAO,EACPC,QAASkB,EAAKH,MAAMf,QACpBF,eAAgB,uBAChBkB,QAAS,KAEXE,EAAKO,mBAGPA,cAAgB,WACd,IAAIC,EAnDR,SAAyBC,GACvB,IAAK,IAAIC,EAAID,EAAaE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAChD,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADQM,EAEX,CAACP,EAAaG,GAAIH,EAAaC,IAAnED,EAAaC,GAFkCM,EAAA,GAE9BP,EAAaG,GAFiBI,EAAA,GAIlD,OAAOP,EA8CkBQ,CAAgBlB,GACvCC,EAAKG,SAAS,CAAEJ,iBAAkBS,6EAG3B,IAAAU,EAAAC,KACP,OACE7C,EAAAC,EAAAC,cAAC4C,EAAD,KACE9C,EAAAC,EAAAC,cAAC6C,EAAD,CACE3C,MAAM,qBACNG,MAAOsC,KAAKtB,MAAMhB,MAClBC,QAASqC,KAAKtB,MAAMf,QACpBF,eAAgBuC,KAAKtB,MAAMjB,iBAE7BN,EAAAC,EAAAC,cAAC8C,EAAD,+CACyChD,EAAAC,EAAAC,cAAA,WADzC,2EAKAF,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,aACbV,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,OACZmC,KAAKtB,MAAME,iBAAiBwB,IAAI,SAAAC,GAAW,OAC1ClD,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,yBACbV,EAAAC,EAAAC,cAACiD,EAAD,CACEC,IAAKF,EAAY7C,GACjBQ,YAAa+B,EAAK/B,YAClBe,gBAAiBgB,EAAKhB,gBACtBG,YAAaa,EAAKb,YAClBE,cAAeW,EAAKX,cACpB5B,GAAI6C,EAAY7C,GAChBY,MAAOiC,EAAYjC,qBAxEnBoC,aCLEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbQrC,EAAQ,IACdsC,QAAQ,OAAQ,SAASC,MAEjCC,IAASC,QAAQ9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SDyH5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b681a495.chunk.js","sourcesContent":["import React from 'react';\r\nimport './NavBar.css';\r\n\r\nconst Nav = props => (\r\n  <nav>\r\n    <ul>\r\n      <li>\r\n        <a href=\"/\">{props.title}</a>\r\n      </li>\r\n\r\n      <li id=\"rp\">{props.responsePrompt}</li>\r\n\r\n      <li id=\"score\">Score: {props.score}</li>\r\n\r\n      <li id=\"hiScore\">Hi-Score: {props.hiScore}</li>\r\n    </ul>\r\n  </nav>\r\n);\r\n\r\nexport default Nav;\r\n","import React from 'react';\r\nimport './PictureCards.css';\r\n\r\nconst PictureCards = props => (\r\n  <div\r\n    className=\"card\"\r\n    value={props.id}\r\n    onClick={() => props.handleClick(props.id)}\r\n  >\r\n    <div className=\"imageContainer\">\r\n      <img alt={props.name} src={props.image} />\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default PictureCards;\r\n","import React from 'react';\r\nimport './Title.css';\r\n\r\nconst Title = props => <h1 className=\"title\">{props.children}</h1>;\r\n\r\nexport default Title;\r\n","import React from 'react';\r\nimport './Wrapper.css';\r\n\r\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\r\n\r\nexport default Wrapper;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport pictureCardsJSON from './pictureCards.json';\nimport Nav from './components/NavBar';\nimport PictureCards from './components/PictureCards';\nimport Title from './components/Title';\nimport Wrapper from './components/Wrapper';\nrequire('gh-pages');\n\nfunction shufflePictures(pictureArray) {\n  for (var i = pictureArray.length - 1; i > 0; i--) {\n    var j = Math.floor(Math.random() * (i - 1));\n    [pictureArray[i], pictureArray[j]] = [pictureArray[j], pictureArray[i]];\n  }\n  return pictureArray;\n}\n\nclass App extends Component {\n  state = {\n    score: 0,\n    hiScore: 0,\n    clicked: [],\n    responsePrompt: '',\n    pictureCardsJSON\n  };\n\n  handleClick = id => {\n    if (this.state.clicked.indexOf(id) == -1) {\n      this.handleIncrement();\n      this.setState({ clicked: this.state.clicked.concat(id) });\n    } else {\n      this.handleReset();\n    }\n  };\n\n  handleIncrement = () => {\n    const newScore = this.state.score + 1;\n    this.setState({\n      score: newScore,\n      responsePrompt: 'Correct!'\n    });\n    if (newScore >= this.state.hiScore) {\n      this.setState({ hiScore: newScore });\n    } else if (newScore == 8) {\n      this.setState({ responsePrompt: 'You are now the Avatar!' });\n    }\n    this.handleShuffle();\n  };\n\n  handleReset = () => {\n    this.setState({\n      score: 0,\n      hiScore: this.state.hiScore,\n      responsePrompt: 'The Fire Nation Won!',\n      clicked: []\n    });\n    this.handleShuffle();\n  };\n\n  handleShuffle = () => {\n    var shuffledPictures = shufflePictures(pictureCardsJSON);\n    this.setState({ pictureCardsJSON: shuffledPictures });\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <Nav\n          title=\"Avater Memory Game\"\n          score={this.state.score}\n          hiScore={this.state.hiScore}\n          responsePrompt={this.state.responsePrompt}\n        />\n        <Title>\n          Click on each character to get points. <br />\n          If you hit the same character more than once, your score will be\n          reset!\n        </Title>\n        <div className=\"container\">\n          <div className=\"row\">\n            {this.state.pictureCardsJSON.map(pictureCard => (\n              <div className=\"col col-md-3 col-sm-3\">\n                <PictureCards\n                  key={pictureCard.id}\n                  handleClick={this.handleClick}\n                  handleIncrement={this.handleIncrement}\n                  handleReset={this.handleReset}\n                  handleShuffle={this.handleShuffle}\n                  id={pictureCard.id}\n                  image={pictureCard.image}\n                />\n              </div>\n            ))}\n          </div>\n        </div>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nvar ghpages = require('gh-pages');\nghpages.publish('dist', function(err) {});\n\nReactDOM.hydrate(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}